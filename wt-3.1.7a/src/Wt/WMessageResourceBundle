// This may look like C code, but it's really -*- C++ -*-
/*
 * Copyright (C) 2008 Emweb bvba, Kessel-Lo, Belgium.
 *
 * See the LICENSE file for terms of use.
 */
#ifndef WMESSAGE_RESOURCE_BUNDLE_
#define WMESSAGE_RESOURCE_BUNDLE_

#include <vector>
#include <set>
#include <Wt/WFlags>
#include <Wt/WLocalizedStrings>

namespace Wt {

class WMessageResources;

/*! \class WMessageResourceBundle Wt/WMessageResourceBundle Wt/WMessageResourceBundle
 *  \brief Support for localized strings using XML files.
 *
 * The resource bundle manages a number of resource files, which allow
 * the developer to conceptually manage its messages in a number of
 * libraries.
 *
 * For example, a WApplication may have a generic message library, that is
 * shared with many other libraries, with re-occurring messages (such as
 * 'welcome', 'add to shopping cart', and 'pay'), and a specific message
 * library for specific messages.
 *
 * Usage example:
 *
 * XML file "general.xml":
 * \code
 * <?xml version="1.0" encoding="UTF-8"?>
 * <messages>
 *   <message id='welcome-text'>
 *     Welcome dear visiter, {1} of the WFooBar magic website !
 *   </message>
 *   <message id='company-policy'>
 *     The company policy is to <b>please our share-holders</b>.
 *   </message>
 * </messages>
 * \endcode
 *
 * \if cpp
 * Use this resource bundle in your program:
 * \code
 * // load the message resource bundle
 * Wt::WApplication *app = Wt::WApplication::instance();
 * app->messageResourceBundle().use("general");
 *
 * // resolve a string using the resource bundle
 * Wt::WText *welcome = new Wt::WText(tr("welcome-visitor").arg("Bart"));
 * \endcode
 * \endif
 */
class WT_API WMessageResourceBundle : public WLocalizedStrings
{
public:
  /*! \brief Resource key scope */
  enum Scope {Default=1, Local=2};

  /*! \brief Creates a message resource bundle.
   */
  WMessageResourceBundle();

  virtual ~WMessageResourceBundle();

  /*! \brief Adds a (series) of message resource files to be used.
   *
   * The \p path is not a URI, and relative paths will be resolved
   * with respect to the working directory of the server. The XML
   * files do not need to be deployed in the web server's docroot.
   *
   * When you give as \p path: /path/to/name, then the following message
   * resource files will be used:
   *  - /path/to/name.xml (default, English)
   *  - /path/to/name_nl.xml (for Dutch)
   *  - /path/to/name_fr.xml (for French)
   *  - etc...
   *
   * The message file that is used depends on the application's locale.
   *
   * A Message resource file must be formatted as follows:
   * \code
     <?xml version="1.0" encoding="UTF-8"?>
     <messages>
       <message id='welcome-text'>
         Welcome dear visiter, {1} of the WFooBar magic website !
       </message>
       <message id='company-policy'>
         The company policy is to <b>please our share-holders</b>.
       </message>
     </messages>
     \endcode
   *
   * The encodings supported are ASCII, UTF-8 (recommended) or UTF-16.
   *
   * To refer the two messages defined in this resource file, use
   * WString::tr("welcome-text").\link WString::arg()
   * arg\endlink(userName) or WWidget::tr("company-policy").
   *
   * \sa WApplication::locale(), WString::tr(), WWidget::tr()
   */
  void use(const std::string& path, bool loadInMemory = true);

  /*! \brief Returns a set of all keys connected with this WMessageResources.
      
    Returns a set of all keys connected with this WMessageResources, 
    within the scope provided as parameter.
   */
  const std::set<std::string> keys(WFlags<Scope> scope) const;

  virtual void refresh();
  virtual void hibernate();

#ifndef WT_TARGET_JAVA
  virtual bool resolveKey(const std::string& key, std::string& result);
#else // WT_TARGET_JAVA
  virtual std::string *resolveKey(const std::string& key) = 0;
#endif // WT_TARGET_JAVA

private:
  void useBuiltin(const char *xmlbundle);
  std::vector<WMessageResources *> messageResources_;
  
  friend class WApplication;
};

}

#endif // WMESSAGE_RESOURCE_BUNDLE_
