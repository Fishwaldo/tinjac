<?xml version="1.0" encoding="ISO-8859-1" ?>
<messages>
  <message id="header">

<div class="header">Wt Ext widgets demo </div>

  </message>

  <message id="about">

<h2><span>About Wt Ext</span></h2>

<p class="p">
  Wt Ext is an add-on library for Wt.
</p>

<p class="p">
  It provides widgets that wrap around the JavaScript Ext library. Therefore,
  these widgets assume availability of JavaScript (and in fact, of a fairly
  recent browser).
</p>

<p class="p">
  Ext widgets may be mixed with other Wt widgets: for example, the tree list
  on the left is created using Wt's native WTreeNode widgets.
</p>

  </message>
  <message id="ex-menu-and-toolbar">

<h2><span>Menu &amp; ToolBar</span></h2>

<p class="p">
  Wt Ext provides Menu and ToolBar classes. Enjoy.
</p>

  </message>
  <message id="ex-form-widgets">

<h2><span>Form widgets</span></h2>

<p class="p">
  Wt Ext provides alternative versions of the plain Wt form widgets, but
  also more complicated widgets such as the TextEdit.
</p>

  </message>
  <message id="ex-table-view">

<h2><span>Table view</span></h2>

<p class="p">
  A TableView may be used to view data from a WStandardItemModel, and provides
  basic viewing functionality such as column resizing and sorting.<br />
</p>

  </message>
  <message id="ex-table-view2">

<p class="p">
  Form fields (LineEdit, NumberField, DateField, and ComboBox), may be
  used in conjunction with a TableView to edit data in the model. In
  the following table, we enabled editing for the first two columns
  (Project and Type) and the last column (Since). Not only strings but
  also numbers and dates are supported natively.
</p>

<p class="p">
  In the third tab panel, we added a WTreeView, a native Wt MVC widget
  which may also be used to implement a table view, although it is
  able to view hierarchical tree tables. All three views share the
  same model, and therefore any change that you perform in the
  editable TableView is reflected in the other views. This is
  facilitated through Wt's MVC: the bottom TableView updates the
  model, which is shared with the top TableView.
</p>

  </message>
  <message id="ex-dialogs">

<h2><span>Dialogs</span></h2>

<p class="p">
  The Ext Dialog and MessageBox classes have APIs that are identical to those
  of WDialog and WMessageBox. In this way, you may switch easily between these
  implementations, at any time. 
</p>

  </message>
   <message id="dialog-nested">

<p class="p" style="margin:5px">
  You may use any widget inside a Dialog. In particular, you can use
  a BorderLayout for more complex layout scenarios.
</p>

  </message>
  <message id="nested-header">

<div>North in a nested layout</div>

  </message>
  <message id="ex-tabwidget">

<h2><span>TabWidget</span></h2>

<p class="p">
A Tab manages contents in several tab panels.
</p>
  </message>
  <message id="tab-1-content">

<p class="p">
Content in the first tab.
</p>

  </message>
  <message id="tab-2-content">

<p class="p">
Content in the second tab.
</p>

  </message>
  <message id="tab-x-content">

<p class="p">
I was dynamically added, and could be anything, really. <br />
Wt is all about being dynamic.
</p>

  </message>
</messages>
