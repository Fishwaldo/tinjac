<?xml version="1.0" encoding="UTF-8" ?>
<messages>
  <message id="top_wt">
    <a href="http://www.emweb.be/">
      <img src="/css/jwt/emweb_powered.jpg" alt="Emweb" height="22" />
    </a> 
  </message>

  <message id="banner_wrapper">
    <div id="banner_content">
      <div id="banner_end"> <div id="banner"><a href="#">JWt</a></div> </div>
    </div>
  </message>

  <message id="footer_wrapper">
    <div id="footer_content">
      <div id="footer_copyright"> 
	<a href="http://www.emweb.be/">
	  <img src="/css/jwt/emweb_large.jpg" height="25" width="101"
	       alt="Emweb.be" title="emweb.be"/></a>
	Solutions for web-based systems<br/>
	<a href="http://www.emweb.be/">www.emweb.be</a>
      </div>

      <div id="footer_menu"> 
	<a href="http://www.webtoolkit.eu/wt/">Home</a>
	| <a href="http://www.emweb.be/?page=contact">Contact</a>
      </div>
      <div class="clearall"></div>
    </div>
    <script type="text/javascript">
      /*<![CDATA[*/
      window.pageTracker = null;
      loadScript("http://www.google-analytics.com/ga.js", function() {
        window.pageTracker = _gat._getTracker('UA-4345578-1');
        window.pageTracker._initData();
        window.pageTracker._trackPageview();
      });
      /* ]]> */
    </script>
  </message>

  <message id="wt">JWt, Java Web Toolkit</message>

  <message id="introduction">Introduction</message>
  <message id="blog">Blog</message>
  <message id="features">Features</message>
  <message id="documentation">Documentation</message>
  <message id="examples">Examples</message>
  <message id="download">Download</message>
  <message id="community">Community</message>
  <message id="other-language">!Java</message>

  <message id="hello-world">Hello world</message>
  <message id="charts">Charts</message>
  <message id="wt-homepage">Wt homepage</message>
  <message id="treeview">Treeview</message>
  <message id="git">Git explorer</message>
  <message id="chat">Chat</message>
  <message id="mail-composer">Mail composer</message>
  <message id="figtree">FigTree</message>
  <message id="widget-gallery">Widget gallery</message>

  <message id="home.news">
    <h3><span>News</span></h3>
  </message>
  <message id="home.latest-news">
    <h4><span>Latest News</span></h4>
  </message>
  <message id="home.historical-news">
    <h4><span>Historical News</span></h4>
  </message>
  
  <message id="source-browser">
    Browse the source code
  </message>

  <message id="src-title">
    <div>
    </div>
  </message>


  <message id="home.intro">

<h3><span>JWt: an introduction</span></h3>

<p>JWt is a Java library for developing interactive web applications
that may be deployed within standard Java Servlet containers.</p>

<p>The API is <b>widget-centric</b> and and uses well-tested patterns
of desktop GUI APIs, tailored to the web. To the developer, it offers
complete abstraction of any web-specific implementation details,
including event handling, graphics support, graceful degradation (or
progressive enhancement) and pretty URLs.</p>

<p>Unlike many page-based frameworks, JWt was designed for creating
stateful applications that are at the same time highly interactive
(leveraging techinques such as Ajax to their fullest) and accessible
(supporting plain HTML browsers), using automatic <b>graceful
degradation or progressive enhancement</b>.</p>

<h4>Interactive, secure and accessible</h4>

<p>Page-based frameworks (based on PHP, JSP/JSF, Ruby on Rails,
etc...) do not make abstraction of the underlying technologies
(HTML/XHTML, JavaScript, CSS, Ajax, Forms, DHTML, SVG/VML/Canvas). As
a consequence, a developer needs to be familiar with all of these
evolving technologies and is also responsible for graceful degradation
when browser support is lacking. The structure of the application
follows mostly the page-centric paradigm of early day HTML. This means
that not only will you need to implement a controller to indicate how
a user moves from page to page, but when using advanced Ajax
techniques you will need to design and maintain manually your
client-server communication.</p>

<p>Pure Ajax frameworks on the other hand require tedious JavaScript
programming to deal with browser quirks and client-server programming
to interact securely with server resources, and all this programming
is exposed. These applications usually are not compliant with
accessibility guidelines and cannot be indexed by a search robot.</p>

<p>In either case, generating HTML code or filling HTML templates is
prone to security problems such as <a
href="http://en.wikipedia.org/wiki/Cross-site_scripting">XSS
(Cross-Site-Scripting)</a> by unwillingly allowing JavaScript to be
inserted in the page, and <a
href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF
(Cross-Site Request Forgery)</a> by trusting cookies for
authentication. These security problems are hard to avoid when as a
developer you need to be able to insert self-written JavaScript to
improve your web application and thus the framework cannot filter it
out.</p>

<p>In contrast, a web application developed with JWt can be developed
in only one compiled language (Java), from which the library generates
the necessary HTML/XHTML, Javascript, CGI, SVG/VML/Canvas and Ajax
code. The responsibility of writing secure and browser-portable web
applications is handled by Wt. For example, if available, Wt will
maximally use JavaScript and Ajax, but applications developed using Wt
will also function correctly when Ajax is not available. Wt will start
with a plain HTML/CGI application and progressively enhance to a rich
Ajax application if possible.</p>

<p>By using standard Java and JVMs, JWt applications can benefit from
any existing Java libraries and JVM features including its support for
scripting languages.</p>

<h4>Typical use scenarios:</h4>

<ul>
  <li>Complex web-based <b>enterprise applications</b> (with a
    database backend) that require a responsive and dynamic user
    interface and benefit from the use of Java, if only to use Java
    refactoring tools while keeping track of ever changing
    requirements.</li>

  <li>Web applications which maximally benefit from modern browser
    capabilities but with <b>graceful degradation</b> to adhere to W3C
    accessibility guidelines and be search engine friendly.</li>

  <li>Porting of <b>Java desktop applications</b> to the web.</li>
</ul>

<h4>Some benefits of using JWt</h4>

<ul>
  <li>The library allows you to develop web applications much like you
    develop Java desktop applications, using your favourite JVM
    programming language, while benefitting fully from the powerful
    tools available for (Java) development such as flexible debugging
    and source code refactoring.</li>
  <li>There are no fragile string-based bindings of parameters in
    templates or XML files, nor do you need to implement tedious (and
    security critical) request/response controller logic.</li>
  <li>Just a library: no need for new conventions which imply behavior
    or requirements for organizing your source code.</li>
  <li>JWt applications have automatic fall-back for non-JavaScript
    browsers where possible, allowing you to create fully accessible
    applications, which benefit from Ajax where available.</li>
  <li>Optionally, use XHTML and CSS for layout and decoration.</li>
  <li>Generates standards compliant HTML or XHTML code.</li>
  <li>Portable, anti-aliased graphics optimized for web usage (using
    inline VML, inline SVG, HTML 5 canvas or PNG images).</li>
  <li>Avoid common security problems since Wt has complete control
    over the presentation layer and proactively filters out
  <i>active</i> tags and attributes, does not expose business logic,
    and simplifies authentication using a stateful design.</li>
  <li>Ultra-fast load time and low bandwidth usage, which are affected
    only by screen complexity, not application size. Wt implements all
    the common tips and tricks for optimizing application
    responsiveness and even optimizes per browser.</li>
  <li>Integrates well with modern object relational mapping techniques such
    as the Java Persistence API (e.g. Hibernate).</li>
</ul>

  </message>
  <message id="home.features">

<h3><span>Features</span></h3>

<h4>Core library</h4>

<ul>
  <li>Supports all major browsers (Firefox/Gecko, Internet Explorer,
    Safari, Chrome, Konqueror, and Opera) but also plain HTML browsers
    (tested with Links and Lynx).</li>
  <li>Simple deployment in standard servlet containers and JEE
    application servers. </li>
  <li>No need for IDE plugins, because the library is a plain Java
    library.</li>
  <li>Equal behavior with or without support for JavaScript or Ajax,
    as far as possible, by using graceful degradation or progressive
    enhancement (the latter using the progressive bootstrap method).</li>
  <li>When Ajax is available, only changes are rendered.</li>
  <li>Two-phased rendering of changes to the web page, with first
    visible, and in the background invisible changes (when Ajax is
    available). When Ajax is not available, only visible contents is
    rendered.</li>
  <li>Support for browser history navigation (back/forward buttons and
    bookmarks), pretty URLs, and search engine optimization with a
    unified behavior for plain HTML or Ajax sessions.</li>
  <li>Widget centric API that promotes component reuse and increases
    productivity.</li>
</ul>

<h4>Event handling</h4>

<ul>
  <li>Uses an event listener system for server-side event handling, 
    comparable to Java GUI frameworks (SWT, Swing).</li>
  <li>Listen for keyboard, mouse, focus and scroll events, and get
    event details (such as mouse position, modifier buttons, or
    keyboard key).</li>
  <li>Automatic synchronization of form field data.</li>
  <li>Possibility to hook in custom JavaScript (e.g. for client-side
    only event handling), and <i>emit</i> Java signals from this
    custom JavaScript.</li>
  <li>Flexible Drag&amp;Drop API.</li>
</ul>

<h4>Native painting system</h4>

<ul>
  <li>Unified painting API which uses the browsers native (vector)
    graphics support (inline VML, inline SVG, or HTML 5 canvas).</li>
  <li>Supports arbitrary painter paths, clipping, text, images,
    transformations, drop shadow.</li>
  <li>Use the painting API to paint a widget, or to create an SVG or
    PNG/GIF image.</li>
</ul>

<h4>GUI components</h4>

See also the <a href="http://www.webtoolkit.eu/widgets">Widget
gallery</a> for an interactive overview of built-in functionality.

<ul>
  <li>Basic widgets: buttons, HTML anchors, checkboxes and radio
    buttons, combo boxes, containers, file upload control, images,
    labels, line edits, buttons, etc..</li>
  <li>Form widgets have built-in support for client-side and
    server-side validation using WValidator classes.</li>
  <li>Composite widgets (that are built on top of basic widgets, and
    use only the JWt public API): calendars, sliders, trees and tree
    tables, menus, in-place edits, suggestion popups, virtual images,
    panels.</li>
  <li>Modal and non-modal windows (dialogs and message boxes).</li>
  <li>Built-in internationalization using messages resource bundles.</li>
  <li>Multi-media (sound and video).</li>
  <li>Flexible charting widgets (cartesian charts and pie charts)
    based on the native painting API, and JWt's MVC infrastructure.</li>
</ul>

<h4>Built-in security</h4>

<ul>
  <li>Enables continuous use of HTTPS through low bandwidth
    requirements.</li>
  <li>Built-in Cross-Site Scripting (XSS) prevention. Rendered text is
    always filtered against potentially malicious code, making XSS
    attacks against JWt applications (close to) impossible.</li>
  <li>Not vulnerable to Cross-site Request Forgery (CSRF) because
    cookies are not needed for session tracking.</li>
  <li>Not vulnerable to breaking the application logic by skipping to
    a particular URL, since only those events exposed in the interface
    can be triggered.</li>
</ul>

<h4>Testing</h4>

With JWt, event handling code constructs and manipulates a widget
tree, which can easily be inspected by test code. Therefore, a <a
href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WTestEnvironment.html">test
environment</a> allows your application to be instantiated and events
to be simulated in absence of a browser, short-cutting the underlying
request/response cycle that would otherwise require a simulated
browser.

<h4>Deployment</h4>
<ul>
  <li>Deploy into servlet containers (Tomcat, Jetty) and application
    servers (JBoss).</li>
  <li>Consists out of (currently four) jar files that need to be
    included in the IDE or used in war/ear archives.</li>
  <li>No XML, except for JEE's web.xml and message resource bundles.</li>
</ul>

  </message>
  <message id="home.examples">

<h3><span>Examples</span></h3>

<p>Explore some live examples of JWt below.</p>

<p>
  The source code of these (and many more) examples is included in the
  JWt source distribution. You may also browse through the source code
  of each example using the <a href="#/src">source code viewer</a>.
</p>

  </message>

  <message id="home.examples.hello">
<div>
<h4 class="example">Hello world!</h4>

<p>
  <a href="http://jwt.emweb.be/jwt-hello" class="run" target="_blank">
    <img src="/icons/orange-play.png" style="vertical-align: top"/> Run example
  </a>
</p>

<p>This simple example illustrates basic JWt concepts:</p>
<ul>
  <li>
    How to create a simple Ajax web application that degrades
    gracefully to plain HTML post-backs, using <a
    href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WApplication.html">WApplication</a> that corresponds to a new session.
  </li>
  <li>
    <b>Creating widgets</b>, and adding them to <b>the widget tree</b>.
  </li>
  <li>
    Reacting to events using <b>event listeners</b>.
  </li>
  <li>
    Reading user input and updating widgets.
  </li>
</ul>
</div>
  </message>

  <message id="home.examples.treeview">
<div>
<h4 class="example">Treeview</h4>
<p>
  <a href="http://jwt.emweb.be/jwt-treeviewdragdrop/treeviewdragdrop" class="run" target="_blank">
    <img src="/icons/orange-play.png" style="vertical-align: top"/> Run example
  </a>
</p>
<p>
  This example demonstrates the following features:
</p>
<ul>
  <li>
    Using <a
    href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WTreeView.html">WTreeView</a>
    and <a
    href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WTableView.html">WTableView"</a>
    for rendering a Model's data in a tree or a table.
  </li>
  <li>
    The use of <a
    href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WSortFilterProxyModel.html">WSortFilterProxyModel</a>
    to implement sorting and filtering of another model.
  </li>
  <li>
    How to implement drag and drop from a selection of items.
  </li>
  <li>
    Using nested layout managers (horizontal and vertical <a
    href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WBoxLayout.html">WBoxLayout</a>)
    for an automatic window-filling layout.
  </li>
  <li>
    How to use a <a
    href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WDialog.html">WDialog</a>
    to present a simple form, using a <a
    href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WGridLayout.html">WGridLayout</a>
    for layout.
  </li>
</ul>
</div>
  </message>

  <message id="home.examples.chart">
<div>
<h4 class="example">Charts example</h4>

<p>
  <a href="http://jwt.emweb.be/jwt-charts/charts" class="run" target="_blank">
    <img src="/icons/orange-play.png" style="vertical-align: top"/> Run example
  </a>
</p>

<p>This example demonstrates the <a
href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/chart/package-summary.html">JWt
charting widgets</a> that are implemented on top of JWt's
cross-browser painting API. This painting API uses built-in browser
support for generating high quality graphics (instead of the more
common approach of rendering PNG/GIF images at the server), thereby
off-loading CPU intensive computations to the browser and at the same
time reducing bandwidth. Depending on the browser, inline VML, inline
SVG, or the HTML 5 canvas is used to render painted contents in a <a
href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WPaintedWidget.html">WPaintedWidget</a>.
</p>

<p>This example demonstrates JWt's MVC infrastructure. Both the <a
href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WTreeView.html">table
view</a> and the charts implement Views on a single <a
href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WAbstractItemModel.html">model</a>. In
this way, all changes in the model are automatically reflected in
updated views. The models may contain strings, numbers or dates.</p>

<p>The example also shows how one may easily use multiple input
widgets, react to input changes, and set and read their contents, and
use <a
href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WComboBox.html">WComboBox</a>
in conjunction with MVC models. Behind the scenes, the library makes
sure that data is synchronized between browser and server.</p>
</div>
  </message>

  <message id="home.examples.composer">
<div>
<h4 class="example">Mail composer</h4>

<p>
  <a href="http://jwt.emweb.be/jwt-composer/composer" class="run" target="_blank">
    <img src="/icons/orange-play.png" style="vertical-align: top"/> Run example
  </a>
</p>

<p>
  This example implements a GMail-like mail composer and shows among
  other things how you can easily upload files asynchronously.
</p>

<p>
  Some notes about this example:
</p>

  <ul>
    <li>
      The <i>ContactSuggestions</i> class provides auto-completion of
      the addressees in the To: Cc: and Bcc: fields. The widget
      derives from the <a
      href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WSuggestionPopup.html">WSuggestionPopup</a>
      class, which uses a number of <a
      href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/JSlot.html">JSlot</a>
      objects. These are slots for which the event handling code is
      specified as JavaScript. In this way, the sorting through
      available contacts for suitable suggestions is done entirely
      client-side. Note that the contacts for this suggestion box are
      automatically transferred in the background after the page has
      been rendered, simply because they are invisible and Wt does
      this for all invisible contents.
    </li>
    <li>
      The <i>AttachmentEdit</i> widget also demonstrates the use of <a
      href="/jwt/latest/doc/javadoc/eu/webtoolkit/jwt/WFileUpload.html">WFileUpload</a>
      which allows for <b>asynchronous transfer of files</b>, in this
      case for uploading the attachments while editing the message.
    </li>
  </ul>
</div>
  </message>

 <message id="home.examples.chat">
<div>
<h4 class="example">Simple Chat</h4>

<p>
  <a href="http://jwt.emweb.be/jwt-simplechat/simplechat" class="run" target="_blank">
    <img src="/icons/orange-play.png" style="vertical-align: top"/> Run example
  </a>
</p>

<p>
  This example implements a simple chat client and server for a
  multi-user chat application. It illustrates how one can easily let
  multiple users interact, for example using <b>server-initiated
  updates</b> to push information from one user to other users.
</p>

<p>
  It also illustrates nice benefits of a class-based approach to web
  application development: you can easily instantiate the same widget
  class multiple times. The SimpleChatClient widget may be intantiated
  as easily as you use basic JWt widgets such as a push button.
</p>

<p>
  Interactive applications like these, which allow users to post HTML
  text to other users, are notorious for <b>cross-site-scripting (XSS)
  attacks</b>: a user enters malicious (javascript) code as part of
  his message. When another user renders this message, it may transmit
  unwanted private information retrieved from, for example, browser
  cookies. JWt prevents such attacks completely, and without any
  responsibility to the developer, since widgets such as WText ensure
  that what is displayed is only passive text, discarding anything
  that is not strictly text.
</p>
</div>
  </message>

 <message id="home.examples.figtree">
<div>
<h4 class="example">FigTree</h4>

<p>
  <a href="http://jwt.emweb.be/figtree/figtree" class="run" target="_blank">
    <img src="/icons/orange-play.png" style="vertical-align: top"/> Run example
  </a>
</p>

<p>
  <a href="http://tree.bio.ed.ac.uk/software/figtree/"
  target="_blank">FigTree</a> is an application created by Andrew
  Rambaut for visualizing
  <a href="http://en.wikipedia.org/wiki/Phylogenetic_tree"
  target="_blank">phylogenetic trees</a> estimated from molecular
  data. It is a Java Swing application with a basic UI available as a
  Java applet.</p>

<p>
  In no more than 500 lines Java code, we reimplemented the applet
  version as a real web application, reusing much of the existing
  application. In fact, we needed only a single line code change and
  both versions are based on the same code base.
</p>

<p>
  The source code of this example is not part of the JWt source
  distribution, but you can find it (including the web version which
  we contributed) on
  the <a href="http://code.google.com/p/figtree/source/checkout"
  target="_blank">FigTree project page</a>.
</p>

<p>
  See also
  our <a href="http://www.webtoolkit.eu/jwt/blog/2010/10/25/fun_with_jwt_and_swing__webgraphics2d"
  target="_blank">blog post</a> on porting this application.
</p>
</div>
  </message>

  <message id="home.download">
    <h3><span>Download</span></h3>
  </message>
  <message id="home.download.license">
<h4>License</h4>

<p>JWt may be used using either the GPL or a Commercial License.</p>

<p>If you wish to use the library using the <b>GNU General Public
License (GPL)</b>, you may build a web application with JWt, and
deploy it to your own intranet or Internet web server, for any
purpose, without the requirement to make the source code freely
available.
</p>

<p>Note that if you are passing on your web application in binary
form, be it selling or giving away for free, then you must include the
source code, as per terms of the GPL. This also applies to
redistribution of the JWt library, in original or modified form.</p>

<p><b>The Commercial License</b> has no such limitations. Please visit
our <a href="http://www.emweb.be/?page=license-wt">Licensing
information</a> page for license terms, pricing and ordering.</p>

<p>You may also obtain <a
href="http://www.emweb.be/?page=services">support and training</a>
options, directly from the library authors.</p>
  </message>

  <message id="home.download.cvs">
<h4>Git repository</h4>

<p>If you want to keep track of the latest changes, or participate in
Wt development, you may want to use the git repository.</p>

<p>
To obtain a clone of JWt:
<div class="fragment">
  <pre class="fragment">$ git clone http://www.webtoolkit.eu/git/jwt.git</pre>
</div>
</p>
  </message>

  <message id="home.download.requirements">
<h4>System requirements</h4>

For building and using the latest version of JWt, you should follow the  <a
href="http://www.webtoolkit.eu/jwt/latest/doc/userguide/userguide.html#getting-started"> Getting started tutorial
</a>, this tutorial explains on how to build JWt and run the examples.
  </message>
  <message id="home.download.packages">
    <h4><span>Available packages</span></h4>
  </message>
  <message id="home.download.version"><b>Version</b></message>
  <message id="home.download.date"><b>Date</b></message>
  <message id="home.download.description"><b>Description</b></message>

  <message id="home.community">
<h3><span>Community</span></h3>

<h4>Authors</h4>

<p>
JWt is mainted by <a href="http://www.emweb.be/">Emweb bvba</a>, and
is derived from the latest version of its sibling C++ solution,
<a href="http://www.webtoolkit.eu/wt">Wt</a>.
</p>

<h4>Wiki</h4>

<p>
There is a community-run <a
href="http://redmine.webtoolkit.eu/wiki/jwt/Main">JWt Wiki</a> where
you may share tips, notes and experiences using JWt.
</p>

<h4>Support</h4>

<p>You can obtain <a href="http://www.emweb.be/?page=services">support
and training</a> options directly from the library authors.</p>

<p>Community help is available in the <a
href="http://redmine.webtoolkit.eu/projects/jwt/boards">public
forums</a>.</p>

<h4>Contributions</h4>

<p>User contributions are welcomed, ranging from simple patches to
widgets, widget sets, and core improvements.</p>

<p>However, because JWt is dual-licensed under an Open Source and
commercial license, and to legally protect the code base of JWt as a
whole by one entity without having to worry about the copyrights for
different pieces, we require a copyright assignment from contributors
to <a href="http://www.emweb.be/">Emweb</a> before
accepting the contribution.</p>
  </message>

  <message id="home.other-language">

<h3><span>!Java ?</span></h3>

<p>You like the functionality, but do not grock Java for your project?</p>

<p>Do not despair. JWt exists in a native variant or through bindings
in other languages:

<ul class="languages">

<li>
<div>
<img class="language-icon" src="/icons/clojure-logo.png" alt="Clojure"></img>

Leveraging the JVM's support for other languages, such
as <b>Clojure</b>, a LISP variant, Raphael Bauduin is experimenting
with <a href="http://www.nsa.be/index.php/eng/Blog/Using-Jwt-yes-it-s-a-J-with-Clojure">using
JWt from within Clojure</a>, documenting his experience in his blog
and eventually developing a small support library.
</div>

<br style="clear: both" />

</li>

<li>
<div>
<img class="language-icon" src="/icons/cpp-logo.jpg" alt="C++"></img>

If you prefer <b>C++</b>, you should consider
using <a href="/wt">Wt</a>, the C++ version, which is developed and
maintained together with the Java version, and from which the Java
version is derived. It comes with application server included.
</div>

<br style="clear: both" />

</li>
<li>
<div>
<img class="language-icon" src="/icons/ruby-logo-R.png" alt="Ruby"></img>

Richard Dale is
maintaining <a href="http://github.com/rdale/wtruby/tree/master">WtRuby</a>,
<b>Ruby</b> bindings to Wt, using the same framework used for generating Ruby
bindings to Qt and KDE.
</div>

<br style="clear: both" />

</li>

</ul>
</p>

  </message>

  <message id="home.documentation">
 
<h3><span>Documentation</span></h3>

<h4>Build and install</h4>

<p>A <a href="http://www.webtoolkit.eu/jwt/latest/doc/userguide/userguide.html" target="_blank">User Guide</a> is available (in a new window). This user guide consists of a <a href="http://www.webtoolkit.eu/jwt/latest/doc/userguide/userguide.html#_library_overview" target="_blank">library overview</a> section and a <a href="http://www.webtoolkit.eu/jwt/latest/doc/userguide/userguide.html#getting-started" target="_blank">getting started</a> section.</p>

<h4>Introduction and tutorials</h4>

<p>Learn about the benefits of using JWt compared to traditional web
application frameworks using our <a
href="/doc/Wt-WhitePaper.pdf">white paper</a>.</p>

<p>More introductory material and tutorials are currently lacking. In
the mean time, you can use the documentation available for <a
href="/wt/documentation">the C++ library</a>, as they are the same
code base.</p>

<h4>Reference manual</h4>

<p>There is a <a href="http://www.webtoolkit.eu/jwt/latest/doc/javadoc/"
target="_blank"> reference manual (in a new window)</a>, generated
from the source code using javadoc. 
</p>

<h4>Wiki</h4>

<p>
There is a community-run <a
href="http://redmine.webtoolkit.eu/wiki/jwt/Main">JWt Wiki</a> where
you may share tips, notes and experiences using JWt.
</p>
  </message>

  <message id="srcview.title.JAVA.">
    <div class="srcviewtitle">
      <h2>Source code for JWt examples</h2>

      <p>
	Browse below the source code for all examples included in 
	<a href="http://www.webtoolkit.eu/jwt">JWt</a>.
      </p>
    </div>
  </message>

  <message id="srcview.title.">JWt examples</message>

  <message id="srcview.title.JAVA.hello">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Hello world</i> example</h2>

      <p>
	Browse below the source code for JWt's 
	<a href="http://www.webtoolkit.eu/jwt/examples/hello_world">
	  Hello world</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.hello">Example: Hello world</message>

  <message id="srcview.title.JAVA.hello">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Hello world</i> example</h2>

      <p>
	Browse below the source code for JWt's 
	<a href="http://www.webtoolkit.eu/jwt/examples/hello_world">
	  Hello world</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.hello_world">Example: Hello world</message>

  <message id="srcview.title.JAVA.charts">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Charts</i> example</h2>

      <p>
	Browse below the source code for JWt's 
	<a href="http://www.webtoolkit.eu/jwt/examples/charts">
	  Charts</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.charts">Example: Charts</message>

  <message id="srcview.title.JAVA.treeviewdragdrop">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Treeview</i> example</h2>

      <p>
	Browse below the source code for JWt's 
	<a href="http://www.webtoolkit.eu/jwt/examples/treeview">
	  Treeview</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.treeviewdragdrop">Example: Treeview</message>

  <message id="srcview.title.JAVA.composer">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Mail composer</i> example</h2>

      <p>
	Browse below the source code for JWt's 
	<a href="http://www.webtoolkit.eu/jwt/examples/composer">
	  Mail composer</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.composer">Example: Mail composer</message>

  <message id="srcview.title.JAVA.simplechat">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Chat</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/jwt/examples/simplechat">
	  Chat</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.simplechat">Example: Chat</message>
</messages>
