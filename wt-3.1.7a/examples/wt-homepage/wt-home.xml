<?xml version="1.0" encoding="UTF-8" ?>
<messages>
  <message id="top_wt">
      <a href="http://www.emweb.be/">
	<img src="/css/wt/emweb_powered.jpg" alt="Emweb" height="22" />
      </a> 
  </message>

  <message id="banner_wrapper">
    <div id="banner_content">
      <div id="banner_end"> <div id="banner"><a href="#">Wt</a></div> </div>
    </div>
  </message>

  <message id="footer_wrapper">
    <div id="footer_content">
      <div id="footer_copyright"> 
	<a href="http://www.emweb.be/">
	  <img src="/css/wt/emweb_large.jpg" height="25" width="101"
	       alt="Emweb.be" title="emweb.be"/></a>
	Solutions for web-based systems<br/>
	<a href="http://www.emweb.be/">www.emweb.be</a>
      </div>

      <div id="footer_menu"> 
	<a href="http://www.webtoolkit.eu/wt/">Home</a>
	| <a href="http://www.emweb.be/?page=contact">Contact</a>
      </div>
      <div class="clearall"></div>
    </div>
    <script type="text/javascript">
      /*<![CDATA[*/
      window.pageTracker = null;
      loadScript("http://www.google-analytics.com/ga.js", function() {
        window.pageTracker = _gat._getTracker('UA-4345578-1');
        window.pageTracker._initData();
        window.pageTracker._trackPageview();
      });
      /* ]]> */
    </script>
  </message>

  <message id="wt">Wt, C++ Web Toolkit</message>

  <message id="introduction">Introduction</message>
  <message id="blog">Blog</message>
  <message id="features">Features</message>
  <message id="documentation">Documentation</message>
  <message id="examples">Examples</message>
  <message id="download">Download</message>
  <message id="community">Community</message>
  <message id="other-language">!C++</message>

  <message id="hello-world">Hello world</message>
  <message id="charts">Charts</message>
  <message id="wt-homepage">Wt homepage</message>
  <message id="treeview">Treeview</message>
  <message id="git">Git explorer</message>
  <message id="chat">Chat</message>
  <message id="mail-composer">Mail composer</message>
  <message id="widget-gallery">Widget gallery</message>

  <message id="home.news">
    <h3><span>News</span></h3>
  </message>
  <message id="home.latest-news">
    <h4><span>Latest News</span></h4>
  </message>
  <message id="home.historical-news">
    <h4><span>Historical News</span></h4>
  </message>

  <message id="source-browser">
    Browse the source code
  </message>

  <message id="src-title">
    <div>
    </div>
  </message>

  <message id="home.intro">

<h3><span>Wt: an introduction</span></h3>

<p>Wt (we pronounce that as 'witty') is a C++ library for developing
interactive web applications.</p>

<p>The API is <b>widget-centric</b> and uses well-tested patterns of
desktop GUI APIs, tailored to the web. To the developer, it offers
complete abstraction of any web-specific implementation details,
including event handling, graphics support, graceful degradation (or
progressive enhancement), and pretty URLs.</p>

<p>Unlike many page-based frameworks, Wt was designed for creating
stateful applications that are at the same time highly interactive
(leveraging techinques such as Ajax to their fullest) and accessible
(supporting plain HTML browsers), using automatic <b>graceful
degradation or progressive enhancement</b>.</p>

<p>The library comes with an application server that acts as a
stand-alone web server or integrates through FastCGI with other web
servers.</p>

<h4>Interactive, secure and accessible</h4>

<p>Page-based frameworks (based on PHP, JSP/JSF, Ruby on Rails,
etc...) do not make abstraction of the underlying technologies
(HTML/XHTML, JavaScript, CSS, Ajax, Forms, DHTML, SVG/VML/Canvas). As
a consequence, a developer needs to be familiar with all of these
evolving technologies and is also responsible for graceful degradation
when browser support is lacking. The structure of the application
follows mostly the page-centric paradigm of early day HTML. This means
that not only will you need to implement a controller to indicate how
a user moves from page to page, but when using advanced Ajax
techniques you will need to design and maintain manually your
client-server communication.</p>

<p>Pure Ajax frameworks on the other hand require tedious JavaScript
programming to deal with browser quirks and client-server programming
to interact securely with server resources, and all this programming
is exposed. These applications usually are not compliant with
accessibility guidelines and cannot be indexed by a search robot.</p>

<p>Generating HTML code or filling HTML templates is prone to security
problems such as <a
href="http://en.wikipedia.org/wiki/Cross-site_scripting">XSS
(Cross-Site-Scripting)</a> by unwillingly allowing JavaScript to be
inserted in the page, and <a
href="http://en.wikipedia.org/wiki/Cross-site_request_forgery">CSRF
(Cross-Site Request Forgery)</a> by trusting cookies for
authentication. These security problems are hard to avoid when as a
developer you need to be able to insert self-written JavaScript to
improve your web application and thus the framework cannot filter it
out.</p>

<p>In contrast, a web application developed with Wt can be developed
entirely in C++, from which the library generates the necessary
HTML/XHTML, CSS, Javascript, CGI, SVG/VML/Canvas and Ajax code. The
responsibility of writing secure and browser-portable web applications
is handled by Wt. For example, if available, Wt will maximally use
JavaScript and Ajax, but applications developed using Wt will also
function correctly when Ajax is not available. Wt will start with a
plain HTML/CGI application and progressively enhance to a rich Ajax
application if possible. With Wt, security is built-in and by
default.</p>

<h4>Typical use scenarios:</h4>

<ul>
  <li>Web-based GUIs for <b>embedded systems</b> benefit from the low
  footprint of a C++ web application server.</li>
  <li>Web-based GUIs that require <b>integration with (existing) C++
  libraries</b>, for example for scientific or engineering
  applications.</li>
  <li>Creating a port of <b>existing C++ desktop applications</b> to
  the web.</li>
  <li><b>High performance, complex</b> web applications which are
  fully personalized (and thus cannot benefit from caching), fully
  Ajax enabled and at the same time entirely accessible and Search
  Engine Optimized.</li>
</ul>

<h4>Other benefits of using Wt</h4>

<ul>
  <li>Develop web applications using familiar desktop GUI
  patterns.</li>
  <li>Provides an extensive set of widgets, which work regardless of
  JavaScript availability (but benefit from JavaScript
  availability).</li>
  <li>A single specification for both client- and server-side
  validation and event handling.</li>
  <li>Optionally, use XHTML and CSS for layout and decoration.</li>
  <li>Generates standards compliant HTML or XHTML code.</li>
  <li>Portable, anti-aliased graphics optimized for web usage (using
  inline VML, inline SVG, HTML 5 canvas or PNG images), which can also
  be used to render to PDF.</li>
  <li>Avoid common security problems since Wt has complete control
  over the presentation layer and proactively filters out
  <i>active</i> tags and attributes, does not expose business logic,
  and simplifies authentication using a stateful design.</li>
  <li>Ultra-fast load time and low bandwidth usage, which are affected
  only by screen complexity, not application size. Wt implements all
  the common tips and tricks for optimizing application
  responsiveness and even optimizes per browser.</li>
  <li>A simple API with a robust cross-browser implementation for
  server-initiated events aka <i>server push</i> or
  <i>comet</i>).</li>
  <li>Use the built-in httpd for easy development and deployment, or
  use the FastCGI/ISAPI connectors to deploy in existing web
  servers.</li>
</ul>

  </message>
  <message id="home.features">

<h3><span>Features</span></h3>

<h4>Core library</h4>

<ul>
  <li>Supports all major browsers (Firefox/Gecko, Internet Explorer,
    Safari, Chrome, Konqueror, and Opera) but also plain HTML browsers
    (tested with Links and Lynx).</li>
  <li>Develop and deploy on Unix/GNU Linux (gcc) or Microsoft Windows
    (Visual Studio).</li>
  <li>Equal behavior with or without support for JavaScript or Ajax,
    as far as possible, by using graceful degradation or progressive
    enhancement (the latter using the progressive bootstrap method).</li>
  <li>Integrated Unicode support (UTF8/UTF16) and pervasive
    localization.</li>
  <li>When Ajax is available, only changes are rendered.</li>
  <li>Two-phased rendering of changes to the web page, with first
    visible, and in the background invisible changes (when Ajax is
    available). When Ajax is not available, only visible contents is
    rendered.</li>
  <li>Configurable session tracking options that include URL rewriting
    and cookies.</li>
  <li>Support for browser history navigation (back/forward buttons and
    bookmarks), pretty URLs, and search engine optimization with a
    unified behavior for plain HTML or Ajax sessions.</li>
  <li>High performance, allowing deployment on low-end embedded
    devices, or energy-, space- and budget-friendly deployment of
    Internet or extranet web sites.</li>
  <li>Completely based on event-driven async I/O: sessions are not
    tied to threads, and neither do delayed responses (e.g. for server
    push) block threads. Instead, threads are needed only to improve
    concurrent request handling or for reentrant event loops.</li>
</ul>

<h4>Event handling</h4>

<ul>
  <li>Uses a typesafe template-based signal/slot system for event
    handling.</li>
  <li>Listen for keyboard, mouse and focus events, and get event
    details (such as mouse position, modifier buttons, or keyboard
    key).</li>
  <li>Automatic synchronization of form field data.</li>
  <li>Dynamic C++-to-JavaScript translation, by specifying
    <i>stateless slot</i> implementations. A single C++ slot implementation
    provides both client-side and server-side event handling: visual changes
    at client-side and application state at server side.</li>
  <li>Possibility to hook in custom JavaScript (e.g. for client-side only event
    handling), and <i>emit</i> C++ signals from this custom JavaScript.</li>
  <li>Drag&amp;Drop API.</li> 
  <li>Supports timed events and built-in support for server-initiated
    updates ("server push")</li>
</ul>

<h4>Native painting system</h4>

<ul>
  <li>Unified painting API which uses the browsers native (vector)
    graphics support (inline VML, inline SVG, or HTML 5 canvas), or
    renders to common image formats (PNG, GIF, ...) or vector formats
    (SVG, PDF).</li>
  <li>Supports arbitrary painter paths, clipping, text, images,
    transformations, drop shadow.</li>
  <li>Use the painting API to paint a widget, or to create an SVG, PDF
    or PNG/GIF image.</li>
</ul>

<h4>GUI components</h4>

See also the <a href="http://www.webtoolkit.eu/widgets">Widget
gallery</a> for an interactive overview of built-in functionality.

<ul>
  <li>Basic HTML widgets: buttons, HTML anchors, checkboxes and radio
    buttons, combo boxes, containers, file upload control, images,
    labels, line edits, buttons, etc..</li>
  <li>Form widgets have built-in support for client-side and
    server-side validation using WValidator classes.</li>
  <li>Composite widgets that are built on top of basic widgets, and
    use only the Wt public API: calendars, sliders, trees and tree
    tables, menus, popup menus, in-place edits, suggestion popups,
    virtual images, panels.</li>
  <li>Modal and non-modal windows (dialog and message boxes).</li>
  <li>Built-in internationalization using messages resource bundles.</li>
  <li>Multi-media (sound and video).</li>
  <li>Flexible charting widgets (cartesian charts and pie charts)
    based on the native painting API, and Wt's MVC infrastructure.</li>
</ul>

<h4>Built-in security</h4>

<ul>
  <li>Kernel-level memory protection protects against privacy issues
    arising from programming bugs, since sessions can be completely
    isolated from each other (in dedicated-process mode).</li>
  <li>Supports encryption and server authentication using Secure Sockets
    Layer (SSL) or Transport Layer Security (TLS) through HTTPS.</li>
  <li>Enables continuous use of HTTPS through low bandwidth
    requirements (fine-grained Ajax).</li>
  <li>Built-in Cross-Site Scripting (XSS) prevention. Rendered text is
    always filtered against potentially malicious code, making XSS
    attacks against Wt applications (close to) impossible.</li>
  <li>Not vulnerable to Cross-site Request Forgery (CSRF) because
    cookies for session tracking are optional, and even when used, they
    are never solely relied on for requests that trigger event handling
    code.</li>
  <li>Not vulnerable to breaking the application logic by skipping to
    a particular URL, since only those events exposed in the interface
    can be triggered.</li>
</ul>

<h4>Object Relational Mapping library</h4>

Wt comes with Wt::Dbo, a self-contained library which implements
Object-Relational mapping, and thus a convenient way to interact with
SQL databases from C++. Although features like optimistic concurrency
control make this an ideal technology for a database driven web
application (and it provides good integration with Wt's MVC classes),
the library can also be used for off-line or other applications (and
does not depend on Wt).

The ORM library (which diserves an introduction by it own in <a
href="http://www.webtoolkit.eu/wt/doc/tutorial/dbo/tutorial.html">this
tutorial</a>) has the following features:

<ul>
  <li>No code generation, no macro hacks, no XML configuration, just
    modern C++!</li>
  <li>Uses a templated visitor pattern which requires a single
    template method to provide the mapping: DRY and as efficient as
    conceivable!</li>
  <li>You can indicate surrogate auto-incremental keys or map natural
    keys of any C++ type, which may also be composite (i.e. require more
    than one database field).</li>
  <li>Supports <a
    href="http://en.wikipedia.org/wiki/Optimistic_concurrency_control">
    optimistic concurrency control</a> using a version field.</li>
  <li>Maps Many-to-One and Many-to-Many relations to STL-compatible
    collections.</li>
  <li>Provides schema generation (aka DDL: data definition language)
    and CRUD operations (aka DML: data manipulation language).</li>
  <li>Prepared statements throughout.</li>
  <li>Each session tracks dirty objects and provides a first-level cache.</li>
  <li>Flexible querying which can query individual fields, objects, or
    tuples of any these (using Boost.Tuple).</li>
  <li>Use a single connection or share connection pools between
    multiple sessions from which connections are used only during an
    active transaction.</li>
  <li>Comes with Sqlite3 and PostgreSQL backends, and a <a
    href="http://wtdbomysql.sourceforge.net/">MySQL backend (GPL
    only)</a> is maintained by the community (Paul Harisson).</li>
</ul>

<h4>Testing</h4>

With Wt, event handling code constructs and manipulates a widget tree,
which can easily be inspected by test code. Therefore, a <a href="
http://webtoolkit.eu/wt/doc/reference/html/classWt_1_1Test_1_1WTestEnvironment.html">test
environment</a> allows your application to be instantiated and events
to be simulated in absence of a browser, short-cutting the underlying
request/response cycle that would otherwise require a simulated browser.

<h4>Deployment</h4>

<p>
The library abstracts different deployment options as connectors
libraries, which connect Wt with the outer world. Switching deployment
option is a matter of (re)linking to one of these connector libraries!
</p>

<h5>a) Built-in httpd</h5>

<ul>
  <li>Simple, high-performance web application server (multi-threaded,
    asynchronous I/O) based on the C++ asio library.</li>
  <li>Supports both HTTP and HTTPS using the OpenSSL library.</li>
  <li>Supports response chunking and compression</li>
  <li>Single process (convenient for development and debugging), and
    embeddable in an existing application.</li>
  <li>Supports deployment behind a ProxyPass'ing (and if needed,
    load-balancing) web server.</li>
  <li>Available for both UNIX and Win32 platforms.</li>
</ul>

<h5>b) FastCGI</h5>

<ul>
  <li>Integrates with most common web servers (apache, lighttpd).</li>
  <li>Different session-to-process mapping strategies.</li>
  <li>Hot deployment: new sessions use the new application version while 
    older sessions may continue with their application version.</li>
  <li>Available only for UNIX platforms.</li>
</ul>

<h5>c) ISAPI</h5>

<ul>
  <li>Integrates with Microsoft IIS server.</li>
  <li>Uses the ISAPI asynchronous API for maximum performance.</li>
  <li>Available for the Win32 platform.</li>
</ul>
  </message>
  <message id="home.examples">

<h3><span>Examples</span></h3>

<p>Explore some live examples of Wt below.</p>

<p>
  The source code of these (and many more) examples is included in the
  Wt source distribution. You may also browse through the source code
  of each example using the <a href="#/src">source code viewer</a>,
  following the link below each example.
</p>

<p>
  Cross-linked source code for these examples is also in
  <a href="/wt/doc/examples/html/modules.html" target="_blank">
  doxygen documentation (in a new window)</a>.
</p>

  </message>
  <message id="home.examples.hello">
<div>
<h4 class="example">Hello world!</h4>

<p>
  <a href="/wt/examples/hello/hello.wt" class="run" target="_blank">
    <img src="/icons/green-play.png" style="vertical-align: top"/> Run example
  </a>
</p>

<p>This simple example illustrates basic Wt concepts:</p>
<ul>
  <li>
    How to make a minimal Wt application, using <b>WRun()</b> to start
    the web server, and a function to create a new <a
    href="/wt/doc/reference/html/classWt_1_1WApplication.html"
    target="_blank">WApplication</a>, corresponding to a new session.
  </li>
  <li>
    <b>Creating widgets</b>, and adding them to <b>the widget tree</b>.
  </li>
  <li>
    Reacting to events using the <b>signal/slot</b> mechanism.
  </li>
  <li>
    Reading user input and updating widgets.
  </li>
</ul>

<p>For a thorough (although slightly out-dated) explanation of the
hello world example, see also the <a
href="http://www.codeguru.com/cpp/i-n/internet/browsercontrol/article.php/c15275/"
target="_blank">nice introduction to Wt</a> written by Victor Venkman.</p>
</div>
  </message>
  <message id="home.examples.wt">
<div>
<h4 class="example">Wt homepage</h4>
<p>We eat our own dog food: this website itself is a Wt application. </p>

<p>
  Not a very interactive application, the wt-homepage illustrates how
  Wt not only shines for highly interactive Ajax applications but may
  also be used for content-driven websites. To that extent, Wt
  supports pretty URLs all the same for both Ajax and plain HTML
  sessions, which allows for browser history navigation and bookmarks,
  and search engine optimization. The application also uses the <a
  href="/wt/doc/reference/html/classWt_1_1WViewWidget.html">WViewWidget</a>
  to increase scalability by minimizing server-side memory usage.
</p>

<p>
  Navigation is provided by the <a
  href="/wt/doc/reference/html/classWt_1_1WMenu.html"
  target="_blank">WMenu</a> and <a
  href="/wt/doc/reference/html/classWt_1_1WTabWidget.html"
  target="_blank">WTabWidget</a> widgets. These widgets share the same
  feature set. For Ajax sessions, they supports <b>pre-loading</b> and
  <b>lazy loading</b> of the contents associated with each item, which
  may be <a
  href="/wt/doc/reference/html/classWt_1_1WMenu.html#d7840197cc0caf0430792b9f4a0df60d"
  target="_blank">specified</a> for each item separately. The
  pre-loading of contents does not increase the load time because the
  Wt rendering engine optimizes the response time by only transmitting
  visual widgets or changes first. Everything invisible (such as the
  contents for other pre-loaded menu items) is transmitted in the
  background, after rendering the visible contents. Automatically.
</p>

<p>
  Menu navigation is implemented using C++ stateless slots, and
  therefore results in <b>client-side</b> event handling code.
</p>
<p>
  The <b>internal path</b> features of WMenu allow it to generate URLs
  for each menu entry, and in this way participate in browser
  navigation history and bookmarking. When the user browses through
  the history, each menu listens for changes that affect their own
  contents, by listening to the <a
  href="/wt/doc/reference/html/classWt_1_1WApplication.html#3e68c4b6bb387f27a614e7962e11967b"
  target="_blank">the internalPathChanged signal</a> of the
  WApplication object. Similarly, when a user bookmarks a URL to
  revisit it later, widgets read the initial internal path when
  created to set the initial content accordingly.
</p>

<p>
  Although Wt is very lightweight in CPU usage at the server, it does
  require to keep some widget state at the server. This is not
  necessarily a problem, provided enough memory (and swap
  space). Since the Wt homepage is deployed on a VPS, we still were
  careful to minimize server state, by using the <a
  href="/wt/doc/reference/html/classWt_1_1WViewWidget.html"
  target="_blank">WViewWidget</a> where possible.
</p>
</div>
  </message>

  <message id="home.examples.treeview">
<div>
<h4 class="example">Treeview</h4>

<p>
  <a href="/wt/examples/treeview-dragdrop/treeview-dragdrop.wt" class="run" target="_blank">
    <img src="/icons/green-play.png" style="vertical-align: top"/>  Run example
  </a>
</p>

This example shows functionality provided by Wt's Views (WTreeView,
WTableView and PieChart) and models.

<ul>
  <li>
    Using <a href="/wt/doc/reference/html/classWt_1_1WTreeView.html"
    target="_blank">WTreeView</a>
    and <a href="/wt/doc/reference/html/classWt_1_1WTableView.html"
    target="_blank">WTableView</a> widgets for rendering a Model's
    data in a tree or a table.
  </li>
  <li>
    The use of <a
    href="/wt/doc/reference/html/classWt_1_1WSortFilterProxyModel.html"
    target="_blank">WSortFilterProxyModel</a>
    to implement sorting and filtering of another model.
  </li>
  <li>
    How to implement drag and drop from a selection of items.
  </li>
  <li>
    Using nested layout managers (horizontal and
    vertical
    <a href="/wt/doc/reference/html/classWt_1_1WBoxLayout.html" target="_blank">
      WBoxLayout</a>)
    for an automatic window-filling layout.
  </li>
  <li>
    How to use a
    modal <a href="/wt/doc/reference/html/classWt_1_1WDialog.html"
    target="_blank"> WDialog</a> to present a simple form, using a
    <a href="/wt/doc/reference/html/classWt_1_1WGridLayout.html"
       target="_blank">WGridLayout</a> for layout.
  </li>
  <li>
    How to show a context-sensitive
    <a href="/wt/doc/reference/html/classWt_1_1WPopupMenu.html" target="_blank">
      WPopupMenu</a>.
  </li>
</ul>
</div>
  </message>
  <message id="home.examples.chart">
<div>
<h4 class="example">Charts example</h4>

<p>
  <a href="/wt/examples/charts/charts.wt" class="run" target="_blank">
    <img src="/icons/green-play.png" style="vertical-align: top"/>  Run example
  </a>
</p>

<p>This example demonstrates the <a
href="/wt/doc/reference/html/group__charts.html" target="_blank">Wt
charting widgets</a> that are implemented on top of Wt's cross-browser
painting API. This painting API uses built-in browser support for
generating high quality graphics (instead of the tradditional approach
of rendering PNG/GIF images at the server). Depending on the browser,
inline VML, inline SVG, HTML 5 canvas, or a PNG image is used to
render painted contents in a <a
href="/wt/doc/reference/html/classWt_1_1WPaintedWidget.html"
target="_blank">WPaintedWidget</a>.
</p>

<p>This example also demonstrates Wt's MVC infrastructure. Both
the <a href="/wt/doc/reference/html/classWt_1_1WTableView.html"
target="_blank">table view</a> and the charts implement Views on a
single <a href="/wt/doc/reference/html/classWt_1_1WAbstractItemModel.html"
target="_blank">model</a>. In this way, all changes in the model are
automatically reflected in updated views. The model may contain
strings, numbers
or <a href="/wt/doc/reference/html/classWt_1_1WDate.html"
target="_blank">dates</a>. You can see this in action by editing the
data using the table view.</p>

<p>The example also shows how one may easily use multiple input
widgets, react to input changes, and set and read their contents, and
use <a href="/wt/doc/reference/html/classWt_1_1WComboBox.html"
target="_blank">WComboBox</a> in conjunction with MVC models.  Behind
the scenes, the library makes sure that data is synchronized between
browser and server.</p>
</div>
  </message>
  <message id="home.examples.git">
<div>
<h4 class="example">Git explorer</h4>

<p>
  <a href="/wt/examples/gitmodel/gitview.wt" class="run" target="_blank">
    <img src="/icons/green-play.png" style="vertical-align: top"/>  Run example
  </a>
</p>

<p>
  This example shows how to implement a custom model for Wt's
  MVC-based view classes, such as
  <a href="/wt/doc/reference/html/classWt_1_1WTreeView.html" target="_blank">
    WTreeView</a>.
</p>
<p>
  Wt provides
  a <a href="/wt/doc/reference/html/classWt_1_1WStandardItemModel"
  target="_blank">WStandardItemModel</a> which can be populated with
  data retrieved from for example a database. A draw-back is however
  that all data is stored in memory and must be retrieved in advance.
  By
  reimplementing <a href="/wt/doc/reference/html/classWt_1_1WAbstractItemModel"
  target="_blank">WAbstractItemModel</a>, you can implement a model
  that retrieves data only when needed, and provides a trade-off
  between loading data in memory or keeping it elsewhere. In this
  example, we implement a tree model that navigates a revision of a
  <a href="http://git-scm.com/">git repository</a>. The model
  lazy-stores identification of folder nodes in memory, in order to
  generate unique ID's for folders. Initially we thought the SHA-1
  id's could be used, but folders with the same content in different
  places of the git repository have the same SHA-1 ID's while
  representing
  different <a href="/wt/doc/reference/html/classWt_1_1WModelIndex.html"
  target="_blank">model indexes</a>.
</p>
</div>
  </message>

  <message id="home.examples.composer">
<div>
<h4 class="example">Mail composer</h4>

<p>
  <a href="/wt/examples/composer/composer.wt" class="run" target="_blank">
    <img src="/icons/green-play.png" style="vertical-align: top"/>  Run example
  </a>
</p>

<p>
  This example implements a GMail-like mail composer and shows among
  other things how you can easily upload files asynchronously.
</p>

  <ul>
    <li>
      The <i>ContactSuggestions</i> class provides auto-completion of
      the addressees in the To: Cc: and Bcc: fields. The widget
      derives from
      the <a href="/wt/doc/reference/html/classWt_1_1WSuggestionPopup.html"
	     target="_blank">WSuggestionPopup</a>
      class, which uses a number of
      <a href="/wt/doc/reference/html/classWt_1_1JSlot.html"
	 target="_blank">JSlot</a>
      objects. These are slots for which the client-side JavaScript
      event handling code is specified in custom JavaScript (in
      contrast to stateless slots, for which client-side JavaScript is
      "learned" through invocation). In this way, the sorting through
      available contacts for suitable suggestions is done entirely
      client-side. Note that the contacts for this suggestion box are
      automatically transferred in the background, simply because they
      are invisible.
    </li>
    <li>
      The <i>AttachmentEdit</i> widget also demonstrates the use of
      <a href="/wt/doc/reference/html/classWt_1_1WFileUpload.html"
	 target="_blank">WFileUpload</a>
      which allows for <b>asynchronous transfer of files</b>, in this
      case for uploading the attachments while editing the message.
    </li>
    <li>
      The <i>Option</i> and <i>OptionList</i> classes show how
      stateless slots may be used even when the behaviour is not
      entirely stateless. In this case, the hiding of an Option
      affects neighboring visible options: an option needs a separator
      only if there is a neighbouring option. By <b>invalidating the
      stateless slot implementations</b> when state has changed, we
      can still use a stateless slot implementation and enjoy
      client-side event handling performance!
    </li>
  </ul>
</div>
  </message>
  <message id="home.examples.chat">
<div>
<h4 class="example">Simple Chat</h4>

<p>
  <a href="/wt/examples/simplechat/simplechat.wt" class="run" target="_blank">
    <img src="/icons/green-play.png" style="vertical-align: top"/>  Run example
  </a>
</p>

<p>
  This example implements a simple chat client and server for a
  multi-user chat application. It illustrates how one can easily let
  multiple users interact, for example using <b>server-initiated
  updates</b> to push information from one user to other users.
</p>

<p>
  It also illustrates nice benefits of a class-based approach to web
  application development: you can easily instantiate the same widget
  class multiple times. The SimpleChatClient widget may be intantiated
  as easily as you use basic Wt widgets such as a push button.
</p>

<p>
  Interactive applications like these, which allow users to post HTML
  text to other users, are notorious for <b>cross-site-scripting (XSS)
  attacks</b>: a user enters malicious (javascript) code as part of
  his message. When another user renders this message, it may transmit
  unwanted private information retrieved from, for example, browser
  cookies. Wt prevents such attacks completely, and without any
  responsibility to the developer, since widgets such as WText ensure
  that what is displayed is only passive text, discarding anything
  that is not strictly text.
</p>
</div>
  </message>
  <message id="home.examples.widgetgallery">
<div>
<h4 class="example">Widget gallery</h4>

<p>
  <a href="/widgets" class="run" target="_blank">
    <img src="/icons/green-play.png" style="vertical-align: top"/>  Go to widget gallery
  </a>
</p>

<p>
 This example demonstrates most widgets provided by Wt, in addition to
 other aspects such as event handling and layout classes. Useful as an
 executable reference to widgets and features provided by the library.
</p>

</div>
  </message>

  <message id="home.download">
    <h3><span>Download</span></h3>
  </message>
  <message id="home.download.license">
<h4>License</h4>

<p>Wt may be used using either the GPL or a Commercial License.</p>

<p>If you wish to use the library using the <b>GNU General Public
License (GPL)</b>, you may build a web application with Wt, and deploy
it to your own intranet or Internet web server, for any purpose,
without the requirement to make the source code freely available.
</p>

<p>Note that if you are passing on your web application in binary form,
be it selling or giving away for free, then you must include the source
code, as per terms of the GPL. This also applies to redistribution of
the Wt library, in original or modified form.</p>

<p><b>The Commercial License</b> has no such limitations. Please visit
our <a href="http://www.emweb.be/?page=license-wt">Licensing
information</a> page for license terms, pricing and ordering.</p>

<p>You may also obtain <a
href="http://www.emweb.be/?page=services">support and training</a>
options, directly from the library authors.</p>
  </message>
  <message id="home.download.requirements">

<h4>The Wt installer: winst <span class="emph">(new!)</span></h4>

If you are curious about Wt and would like to try it out but your OS
or distribution does not provide an up-to-date package, then this may
be just what you need. This package will download and build Wt and its
dependencies in a <b>UNIX(-like) environment</b>, and provides also
a script to run the examples.
<p>
This requires <tt>CMake</tt> and <tt>GNU make</tt> and will try to
download software using <tt>wget</tt>.
</p>
<p>
Download the package
(<a href="http://www.webtoolkit.eu/packages/winst-0.2.tar.gz">winst-0.2.tar.gz</a>)
or get the latest git version:
<div class="fragment">
  <pre class="fragment">$ git clone http://www.webtoolkit.eu/git/winst.git</pre>
</div>
</p>

<h4>System requirements</h4>

For building and installing the latest version of Wt, you need at
least the following two packages:
<ul>
  <li><a href="http://www.cmake.org/">CMake</a> cross-platform make configure
    utility.<br />

    CMake &gt;= 2.6 is preferred (although by the act of a miracle,
    2.4 still works).
  </li>
  <li>
    The indispensable <a href="http://www.boost.org/">
    boost C++ library</a>: boost-1.36 or later. <br />

    The following boost libraries (which are not headers only) are
      needed: <tt>boost_date_time</tt>, <tt>boost_regex</tt>,
      <tt>boost_program_options</tt>, <tt>boost_signals</tt>,
      <tt>boost_system</tt>, and optionally (but highly recommended)
      <tt>boost_thread</tt>.
  </li>
</ul>

The following packages are optional, and availability enables additional
features in Wt:
<ul>
  <li><a href="http://www.postgresql.org/">PostgreSQL</a>: if
    available, then also a
    <a href="/wt/doc/reference/html/classWt_1_1Dbo_1_1backend_1_1Postgres.html">postgres
    connector</a> will be built for the ORM library
    (<a href="/wt/doc/tutorial/dbo/tutorial.html">Wt::Dbo</a>)</li>
  <li><a href="http://libharu.org/wiki/Main_Page">libharu</a>: if
    available,
    a <a href="/wt/doc/reference/html/classWt_1_1WPdfImage.html">WPdfImage</a>
    paint device will be built, allowing to integrate graphics into
    PDF documents or be served as a PDF document.</li>
  <li><a href="http://www.graphicsmagick.org/">GraphicsMagick</a>: if
    available,
    a <a href="/wt/doc/reference/html/classWt_1_1WRasterImage.html">WRasterImage</a>
    paint device will be built, allowing to paint graphics on a raster
    image (like PNG or GIF).</li>
</ul>

<p>The other requirements depend on the connector support you would
like. The connector is what makes your Wt application communicate with
the browser:</p>

<h5>For FastCGI (Unix only):</h5>

<ul>
  <li>Apache 1 or 2, or another web server which supports the FastCGI
  protocol.</li>
  <li>
    <a href="http://www.fastcgi.com/#TheDevKit">FastCGI development kit</a>
    : fcgi-2.4.0
  </li>

   <li>
     When using apache:
     Apache <a href="http://www.fastcgi.com/dist/mod_fastcgi-2.4.6.tar.gz">mod_fastcgi</a>:
     mod_fastcgi-2.4.x.<br />Alternatively you may
     use <a href="http://httpd.apache.org/download.cgi#mod_fcgid">mod_fcgid</a>:
     mod_fcgid-2.3.5.
  </li> 
</ul>

<h5>For the built-in http deamon, wthttpd:</h5>

<ul>
  <li>The built-in httpd requires the boost asio C++ library, which is a
    header-only library included in boost.
  </li>
  <li>Optionally, libz (for compression-over-HTTP) and openssl (for
    HTTPS support).
  </li>
</ul>

<h5>For ISAPI (Win32 only):</h5>

<ul>
  <li>The ISAPI connector only works for deploying Wt applications withing a
    Microsoft IIS server.</li>
</ul>

Follow the <a
href="/wt/doc/reference/html/Installation.html">Installation
instructions</a> to build Wt and run the examples, or see if your
platform is listed in the <a
href="http://redmine.webtoolkit.eu/wiki/wt/Wt_Installation">platform specific
installation instructions</a>.
  </message>
  <message id="home.download.cvs">
<h4>Git repository</h4>

<p>If you want to keep track of the latest changes, or participate in
Wt development, you may want to use the git repository.</p>

<p>
To checkout wt:
<div class="fragment">
  <pre class="fragment">$ git clone http://www.webtoolkit.eu/git/wt.git</pre>
</div>
</p>
  </message>
  <message id="home.download.packages">
    <h4><span>Available packages</span></h4>
  </message>
  <message id="home.download.version"><b>Version</b></message>
  <message id="home.download.date"><b>Date</b></message>
  <message id="home.download.description"><b>Description</b></message>

  <message id="home.community">
<h3><span>Community</span></h3>

<h4>Authors</h4>

<p>
The software was originally developed by <a
href="mailto:koen@emweb.be">Koen Deforche</a>, and is currently
maintained by <a href="http://www.emweb.be/">Emweb bvba</a>.</p>

<p>We are greateful to these projects from which we borrowed code:</p>
<ul>
<li>The built-in httpd is based on an example of the <a
href="http://asio.sourceforge.net/">asio C++
library</a>, developed by Christopher M. Kohlhoff. <a
href="http://www.boost.org/LICENSE_1_0.txt">Boost Software License</a></li>
<li><a href="http://threadpool.sourceforge.net/">Thread pool</a>
implementation from Philipp Henkel.  <a
href="http://www.boost.org/LICENSE_1_0.txt">Boost Software License</a></li>
<li>The <a href='http://rapidxml.sourceforge.net/'>RapidXML</a>
library by Marcin Kalicinski.  <a
href="http://www.boost.org/LICENSE_1_0.txt">Boost Software License</a></li>
</ul>

<h4>Wiki</h4>

<p>
There is a community-run <a
href="http://redmine.webtoolkit.eu/wiki/wt">Wt Wiki</a> with useful
information, including installation notes for several Linux
distributions.
</p>

<h4>Support</h4>

<p>You can obtain <a href="http://www.emweb.be/?page=services">support
and training</a> options directly from the library authors.</p>

<p>Community help is available in the <a
href="http://redmine.webtoolkit.eu/projects/wt/boards">public
forums</a>. Until September 2009, there was only a <a
href="mailto:witty-interest@lists.sourceforge.net">mailing list</a>
(<a
href="http://lists.sourceforge.net/lists/listinfo/witty-interest">how
to join</a>), and the old dogs haven't left yet. You may search or
browse the mailing list archives using the <a
href="http://gmane.org/info.php?group=gmane.comp.web.witty.general">Gmane
gateway</a> (kudos to Pau Garcia i Quiles for setting this up).
</p>

<h4>Contributions</h4>

<p>Development of Wt is sponsored by the following companies and
organisations:</p>

<p>
<table>
  <tr>
    <td class="sponsor-logo"><a href="http://www.emweb.be/">
      Emweb bvba</a>
    </td>
    <td class="sponsor-role">
      Creators, official maintainers, and support
    </td>
  </tr>
  <tr>
    <td class="sponsor-logo">
      <a href="http://www.eurofer.be/">
      Eurofer</a>
    </td>
    <td class="sponsor-role">
      Sponsored the development of the charting library, WTreeView and
      hierachical item models.
    </td>
  </tr>
</table>
</p>

<p>User contributions are welcomed, ranging from simple patches to
widgets, widget sets, and core improvements.</p>

<p>However, because Wt is dual-licensed under an Open Source and
commercial license, and to legally protect the code base of Wt as a
whole by one entity without having to worry about the copyrights for
different pieces, we require a copyright assignment from contributors
to <a href="http://www.emweb.be/">Emweb</a> before
accepting the contribution.</p>

<h4>Translations</h4>

The Chinese translation of the homepage was provided by Zhimin Song.

<h4>Sourceforge</h4>

<a href="http://sourceforge.net"><img src="http://sflogo.sourceforge.net/sflogo.php?group_id=153710&amp;type=1" style="vertical-align:middle" width="88" height="31" border="0" alt="SourceForge.net Logo" /></a>
The Wt project is hosted at sourceforge <a href="http://sourceforge.net/projects/witty/">here</a>.
  </message>
  <message id="home.other-language">

<h3><span>!C++ ?</span></h3>

<p>You like the library functionality, but do not grock C++ for your
project?</p>

<p>Do not despair. Wt exists in a native variant or through bindings
in other languages:

<ul class="languages">
<li>
<div>
<img class="java-language-icon" src="/icons/java-logo.png" alt="Java"></img>

You can use <a href="/jwt">JWt</a>, a native <b>Java</b> version of Wt
developed and maintained together with the C++ version. It has, with
few exceptions, the same features as Wt, but runs natively in the JVM
and can be deployed into any Servlet container.
</div>

<br style="clear: both" />

</li>
<li>
<div>
<img class="language-icon" src="/icons/ruby-logo-R.png" alt="Ruby"></img>

Richard Dale is
maintaining <a href="http://github.com/rdale/wtruby/tree/master">WtRuby</a>,
<b>Ruby</b> bindings to Wt, using the same framework used for generating Ruby
bindings to Qt and KDE.
</div>


<br style="clear: both" />

</li>

<li>
<div>
<img class="language-icon" src="/icons/clojure-logo.png" alt="Clojure"></img>

Leveraging the JVM's support for other languages, such as <b>Clojure</b>, a
LISP variant, Raphael Bauduin is experimenting with <a
href="http://www.nsa.be/index.php/eng/Blog/Using-Jwt-yes-it-s-a-J-with-Clojure">using JWt from within Clojure</a>, documenting his experience in his blog
and eventually developing a small support library.
</div>

<br style="clear: both" />

</li>
</ul>
</p>

  </message>
  <message id="home.documentation">
 
<h3><span>Documentation</span></h3>

<h4>Build and install</h4>

<p>
Generic installation instructions (UNIX)
are <a href="/wt/doc/reference/html/Installation.html">here</a>, which
is also included in the source package (INSTALL or INSTALL.html).</p>
<p>
In addition, the <a href="http://redmine.webtoolkit.eu/wiki/wt">Wt
Wiki</a> has a section dedicated
to <a href="http://redmine.webtoolkit.eu/wiki/wt/Wt_Installation">platform
specific installation notes</a>.
</p>

<h4>Introduction and tutorials</h4>

<ul>
<li>Learn about the benefits of using Wt compared to traditional web
application frameworks using our <a
href="/doc/Wt-WhitePaper.pdf">white paper</a>.</li>

<li>Dr Dobbs Journal has a good <a href="http://www.ddj.com/cpp/206401952">
introductary article on Wt</a> (February 2008).</li>

<li>The reference manual contains
a <a href="http://www.webtoolkit.eu/wt/doc/reference/html/overview.html">library
overview</a> which is a good starting point.</li>

<li>Software Developers Journal has a (slighly outdated) tutorial
(April 2006). The tutorial uses the Hangman example code (see also in
the examples section!). You can view a copy of the article <a
href="/wt/doc/tutorial/wt-sdj.xhtml">on-line</a> or grab a
<a href="/wt/doc/tutorial/wt-sdj.pdf">PDF copy</a>.</li>

<li>Victor Venkman wrote a
<a href="http://www.codeguru.com/cpp/i-n/internet/browsercontrol/article.php/c15275/">nice introduction to Wt</a>, with a close examination of
the <a href="/wt/examples">hello world example</a>.</li>

</ul>

<h4>Reference manual</h4>

<p>There is a a <a href="/wt/doc/reference/html/index.html"
target="_blank"> reference manual (in a new window)</a>, generated
from the source code using doxygen. This also contains a small
tutorial on the tree list example, focusing in particular on the
stateless slot implementation mechanism, which is a more advanced
feature of Wt to allow optimisation of event handling to client side
code.</p>

<h4>Annotated examples</h4>

<p>Source-level documentation has also been generated for the examples
and can be viewed <a href="/wt/doc/examples/html/modules.html"
target="_blank">here (in a new window)</a>.</p>

<h4>Wiki</h4>

<p>
There is a community-run <a href="http://redmine.webtoolkit.eu/wiki/wt">Wt Wiki</a> with useful information such as a FAQ and
tips and tricks.
</p>

  </message>

  <message id="srcview.title.CPP.">
    <div class="srcviewtitle">
      <h2>Source code for Wt examples</h2>

      <p>
	Browse below the source code for all examples included in 
	<a href="http://www.webtoolkit.eu/wt">Wt</a>.
      </p>
    </div>
  </message>

  <message id="srcview.title.">Wt examples</message>

  <message id="srcview.title.CPP.hello">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Hello world</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/wt/examples/hello_world">
	  Hello world</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.hello">Example: Hello world</message>

  <message id="srcview.title.CPP.charts">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Charts</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/wt/examples/charts">
	  Charts</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.charts">Example: Charts</message>

  <message id="srcview.title.CPP.treeview-dragdrop">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Treeview</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/wt/examples/treeview">
	  Treeview</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.treeview-dragdrop">Example: Treeview</message>

  <message id="srcview.title.CPP.composer">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Mail composer</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/wt/examples/composer">
	  Mail composer</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.composer">Example: Mail composer</message>
  
  <message id="srcview.title.CPP.wt-homepage">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Wt homepage</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/wt/examples/wt-homepage">
	  Homepage </a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.wt-homepage">Example: Wt Homepage</message>

  <message id="srcview.title.CPP.gitmodel">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Git explorer</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/wt/examples/gitmodel">
	  Git explorer</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.gitmodel">Example: Git explorer</message>

  <message id="srcview.title.CPP.simplechat">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Chat</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/wt/examples/simplechat">
	  Chat</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.simplechat">Example: Chat</message>

  <message id="srcview.title.CPP.widgetgallery">
    <div class="srcviewtitle">
      <h2>Source code of the <i>Widget gallery</i> example</h2>

      <p>
	Browse below the source code for Wt's 
	<a href="http://www.webtoolkit.eu/wt/examples/widgetgallery">
	  Widget gallery</a> example.
      </p>
    </div>
  </message>

  <message id="srcview.title.widgetgallery">Example: Widget gallery</message>
</messages>
